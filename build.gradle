// Gradle Wrapper
task wrapper(type: Wrapper) {
    gradleVersion = gradle_version
    jarFile = 'wrapper/wrapper.jar'
}

// Gradle Plugin
apply plugin: 'java'

apply plugin: 'eclipse'
apply plugin: 'idea'

apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'


// jdk version
sourceCompatibility = jdk_version
targetCompatibility = jdk_version

// repository
repositories {
    mavenCentral()
}

// dependencies
dependencies {
    compile     group: 'commons-collections', name: 'commons-collections', version: '3.2'
    compile     group: 'log4j', name: 'log4j', version: '1.+'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

// encoding

def defaultEncoding = 'UTF-8'

compileJava {
    options.encoding = defaultEncoding
}

compileTestJava {
    options.encoding = defaultEncoding
}

//
// archive
//
jar {
    from configurations.compile.collect {
        it.isDirectory() ? it : zipTree(it) 
    }
    
    manifest {
        attributes(
            "Manifest-Version"       : "1.0",
            "Build-Jdk"              : "${System.getProperty('java.version')} (${System.getProperty('java.vm.vendor')} ${System.getProperty('java.vm.version')})",
            "Build-Tool"             : "Gradle ${gradle.gradleVersion}",
            "Build-Timestamp"        : new Date().toString(),
//          "Created-By"             : vendor,
//          "Specification-Title"    : appName,
//          "Specification-Version"  : version,
//          "Specification-Vendor"   : vendor,
//          "Implementation-Title"   : appName,
//          "Implementation-Version" : version,
//          "Implementation-Vendor"  : vendor,
//          "Main-Class"             : mainClass,
            "Class-Path"             : configurations.compile.collect { '../libs/' + it.getName() }.join(' '),
        )
    }
}

//
// java doc
//
javadoc {
    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PUBLIC
    options.author = true
}


//==============================
// analysis report
//==============================
// coverage
jacocoTestReport.dependsOn += test
jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
            xml.enabled true
            html.enabled true
    }
}

// findbug
findbugsMain {
    effort = "max"
    reportLevel = "high"
    ignoreFailures = true
    reports {
            xml.enabled true
            html.enabled false
    }
}
findbugsTest {
    effort = "max"
    reportLevel = "high"
    ignoreFailures = true
    reports {
            xml.enabled true
            html.enabled false
    }
}

// PDM
pmdMain {
    reports {
            xml.enabled true
            html.enabled false
    }
  ignoreFailures = true
}

pmdMain {
    reports {
            xml.enabled true
            html.enabled false
    }
  ignoreFailures = true
}

// checkstyle
checkstyleMain {
  ignoreFailures = true
}

checkstyleTest {
  ignoreFailures = true
}


